type bin = +{ 'e : 1, 'b0 : bin, 'b1 : bin }

proc succ (y : bin) [x : bin] =
recv x ( 'e => recv x (() => send y 'b1 ; send y 'e ; send y ())
        | 'b0 => send y 'b1 ; fwd y x
        | 'b1 => send y 'b0 ; call succ (y) [x] )

proc zero (n0 : bin) [] = send n0 'e ; send n0 ()
proc one (n1 : bin) [] = n0 : bin <- call zero (n0) []; call succ (n1) [n0]
proc two (n2 : bin) [] = n1 : bin <- call one (n1) []; call succ (n2) [n1]
proc three (n3 : bin) [] = n2 : bin <- call two (n2) []; call succ (n3) [n2]
proc four (n4 : bin) [] = n3 : bin <- call three (n3) []; call succ (n4) [n3]

type list = +{ 'nil : 1, 'cons : bin * list }
proc nil (r : list) [] = send r 'nil ; send r ()
proc cons (r : list) [x : bin, l : list] =
  send r 'cons ; send r x ; fwd r l

proc list_test (result : list) [] =
  l : list <- call nil (l) [] ;
  n0 : bin <- call zero (n0) [] ;
  ln0 : list <- call cons (ln0) [n0, l] ;
  n1 : bin <- call one (n1) [] ;
  ln0n1 : list <- call cons (ln0n1) [n1, ln0] ;
  n2 : bin <- call two (n2) [] ;
  call cons (result) [n2, ln0n1]

proc dupbin (n1 : bin, n2 : bin) [n : bin] =
  recv n ( 'e => recv n (() => send n1 'e ; send n1 () ; send n2 'e ; send n2 ())
          | 'b0 => send n1 'b0 ; send n2 'b0 ; call dupbin (n1, n2) [n]
          | 'b1 => send n1 'b1 ; send n2 'b1 ; call dupbin (n1, n2) [n] )

proc duplist (result1 : list, result2 : list) [l : list] =
  recv l ( 'nil => recv l (() => send result1 'nil ; send result1 () ; send result2 'nil ; send result2 ())
          | 'cons => recv l (x => 
              n1 : bin <- (
                n2 : bin <- call dupbin (n1, n2) [x];
                send result2 'cons; send result2 n2
              );
              send result1 'cons; send result1 n1; call duplist (result1, result2) [l]
            )
          )

proc duplist_test (result1 : list, result2 : list) [] =
  l : list <- call list_test (l) [];
  call duplist (result1, result2) [l]

exec duplist_test